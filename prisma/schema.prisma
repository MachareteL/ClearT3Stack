// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Product {
    id          String       @id @default(cuid()) @map("_id") @db.ObjectId
    name        String
    description String
    price       Float
    OrderItems  OrderItems[]
}

model Category {
    id   String @id @default(cuid()) @map("_id") @db.ObjectId
    name String
}

model Orders {
    id         String       @id @default(cuid()) @map("_id") @db.ObjectId
    userId     String       @db.ObjectId
    status     Status
    createdAt  DateTime     @default(now())
    user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    OrderItems OrderItems[]
}

model OrderItems {
    id        String  @id @default(cuid()) @map("_id") @db.ObjectId
    orderId   String  @db.ObjectId
    productId String  @db.ObjectId
    order     Orders  @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum Status {
    overdue
    pending
    delivered
    onRoute
}

// model Example {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Orders        Orders[]

    @@map("users")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique @db.String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}
